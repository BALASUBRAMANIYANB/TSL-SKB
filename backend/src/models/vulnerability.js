const mongoose = require('mongoose');

const VulnerabilitySchema = new mongoose.Schema({
  scan: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Scan',
    required: true
  },
  target: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Target',
    required: true
  },
  name: {
    type: String,
    required: [true, 'Please add a vulnerability name'],
    trim: true
  },
  description: {
    type: String,
    required: [true, 'Please add a description']
  },
  severity: {
    type: String,
    enum: ['low', 'medium', 'high', 'critical'],
    required: true
  },
  cvssScore: {
    type: Number,
    min: 0,
    max: 10
  },
  cvssVector: {
    type: String
  },
  cweId: {
    type: String
  },
  cveId: {
    type: String
  },
  location: {
    url: String,
    method: String,
    parameter: String,
    evidence: String
  },
  request: {
    method: String,
    url: String,
    headers: Object,
    body: String
  },
  response: {
    statusCode: Number,
    headers: Object,
    body: String
  },
  tool: {
    type: String,
    enum: ['zap', 'nmap', 'nikto', 'burp'],
    required: true
  },
  toolSpecificData: {
    type: Object
  },
  remediation: {
    description: String,
    steps: [String],
    references: [String]
  },
  status: {
    type: String,
    enum: ['open', 'in_progress', 'resolved', 'false_positive', 'accepted_risk'],
    default: 'open'
  },
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  comments: [{
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    text: {
      type: String,
      required: true
    },
    createdAt: {
      type: Date,
      default: Date.now
    }
  }],
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Add indexes for faster queries
VulnerabilitySchema.index({ scan: 1, severity: 1 });
VulnerabilitySchema.index({ target: 1, status: 1 });
VulnerabilitySchema.index({ severity: 1, status: 1 });
VulnerabilitySchema.index({ assignedTo: 1, status: 1 });

// Update the updatedAt timestamp before saving
VulnerabilitySchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('Vulnerability', VulnerabilitySchema); 