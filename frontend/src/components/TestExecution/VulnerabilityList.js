import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Collapse,
  IconButton,
  Chip,
  Divider,
  Button
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  BugReport as BugIcon,
  Security as SecurityIcon,
  Link as LinkIcon
} from '@mui/icons-material';

const VulnerabilityList = ({ vulnerabilities }) => {
  const [expandedId, setExpandedId] = useState(null);

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };

  const handleExpandClick = (id) => {
    setExpandedId(expandedId === id ? null : id);
  };

  return (
    <Paper>
      <List>
        {vulnerabilities.map((vuln, index) => (
          <React.Fragment key={vuln.id}>
            <ListItem
              button
              onClick={() => handleExpandClick(vuln.id)}
              sx={{
                bgcolor: expandedId === vuln.id ? 'action.hover' : 'inherit'
              }}
            >
              <ListItemIcon>
                <BugIcon color={getSeverityColor(vuln.severity)} />
              </ListItemIcon>
              <ListItemText
                primary={
                  <Box display="flex" alignItems="center" gap={1}>
                    <Typography variant="subtitle1">
                      {vuln.title}
                    </Typography>
                    <Chip
                      label={vuln.severity}
                      size="small"
                      color={getSeverityColor(vuln.severity)}
                    />
                    {vuln.source && (
                      <Chip
                        icon={<SecurityIcon />}
                        label={vuln.source}
                        size="small"
                        variant="outlined"
                      />
                    )}
                  </Box>
                }
                secondary={vuln.description}
              />
              <IconButton>
                {expandedId === vuln.id ? <ExpandLessIcon /> : <ExpandMoreIcon />}
              </IconButton>
            </ListItem>
            <Collapse in={expandedId === vuln.id} timeout="auto" unmountOnExit>
              <Box sx={{ pl: 4, pr: 2, pb: 2 }}>
                {vuln.remediation && (
                  <Typography variant="body2" paragraph>
                    <strong>Remediation:</strong> {vuln.remediation}
                  </Typography>
                )}
                {vuln.references?.map((ref, idx) => (
                  <Button
                    key={idx}
                    href={ref.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    startIcon={<LinkIcon />}
                    size="small"
                  >
                    {ref.title || ref.url}
                  </Button>
                ))}
              </Box>
            </Collapse>
            {index < vulnerabilities.length - 1 && <Divider />}
          </React.Fragment>
        ))}
      </List>
    </Paper>
  );
};

export default VulnerabilityList; 